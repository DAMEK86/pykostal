# This workflow will create a release and upload a Python Package to PyPI
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Release to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # for creating releases and tags
  id-token: write  # for trusted publishing to PyPI

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Version must follow semantic versioning (e.g., 0.0.3, 1.0.0, 1.0.0-alpha.1)"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: validate-version
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Run tests
      run: pytest

  release-build:
    runs-on: ubuntu-latest
    needs: [validate-version, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        sed -i 's/version = "[^"]*"/version = "'$VERSION'"/' pyproject.toml
        echo "Updated version to: $VERSION"
        
    - name: Verify version update
      run: |
        grep "version.*${{ needs.validate-version.outputs.version }}" pyproject.toml
        
    - name: Build release distributions
      run: python -m build
      
    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs: [validate-version, release-build]
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    # Dedicated environments with protections for publishing are strongly recommended.
    environment: pypi-release
    steps:
    - name: Retrieve release distributions
      uses: actions/download-artifact@v4
      with:
        name: release-dists
        path: dist/

    - name: List built packages
      run: |
        echo "� Built packages:"
        ls -la dist/
        
    - name: Publish release distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
  create-release:
    runs-on: ubuntu-latest
    needs: [validate-version, pypi-publish]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog generation
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        
        # Get the latest tag (if any) to generate changelog from
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "No previous tags found, generating changelog from all commits"
          COMMIT_RANGE=""
        else
          echo "Generating changelog from $LATEST_TAG to HEAD"
          COMMIT_RANGE="$LATEST_TAG..HEAD"
        fi
        
        # Generate changelog using conventional commits
        CHANGELOG=$(cat << 'EOF'
        ## 🚀 Features
        $(git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^feat" | head -20)
        
        ## 🐛 Bug Fixes
        $(git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^fix" | head -20)
        
        ## 📚 Documentation
        $(git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^docs" | head -10)
        
        ## 🔧 Maintenance
        $(git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^chore\|^ci\|^build\|^refactor" | head -10)
        
        ## 🔄 Other Changes
        $(git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --invert-grep --grep="^feat\|^fix\|^docs\|^chore\|^ci\|^build\|^refactor" | head -10)
        EOF
        )
        
        # Clean up empty sections
        CHANGELOG=$(echo "$CHANGELOG" | sed '/^## /N;/\n$/d' | sed 's/^$(git log.*)//')
        
        # If no changes found, add a default message
        if [ -z "$(echo "$CHANGELOG" | grep -v '^##')" ]; then
          CHANGELOG="## Changes\n- Minor improvements and updates"
        fi
        
        # Save changelog to output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Update CHANGELOG.md
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create temporary changelog entry
        cat > temp_changelog.md << EOF
        ## [$VERSION] - $DATE
        
        ${{ steps.changelog.outputs.changelog }}
        
        EOF
        
        # Insert new changelog entry after the [Unreleased] section
        if [ -f CHANGELOG.md ]; then
          # Find the line number of [Unreleased] section and insert after it
          sed -i "/## \[Unreleased\]/r temp_changelog.md" CHANGELOG.md
        else
          # Create new CHANGELOG.md if it doesn't exist
          cat > CHANGELOG.md << EOF
        # Changelog
        
        All notable changes to this project will be documented in this file.
        
        ## [Unreleased]
        
        $(cat temp_changelog.md)
        EOF
        fi
        
        rm temp_changelog.md
        
        # Commit and push the updated changelog
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "docs: update CHANGELOG.md for v$VERSION" || echo "No changes to commit"
        git push origin master || echo "No changes to push"
        
    - name: Create Git tag
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate-version.outputs.version }}
        name: Release v${{ needs.validate-version.outputs.version }}
        body: |
          ## Release v${{ needs.validate-version.outputs.version }}
          
          🎉 New release of pykostal!
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### Installation
          ```bash
          pip install pykostal==${{ needs.validate-version.outputs.version }}
          ```
          
          ### PyPI
          This release is available on [PyPI](https://pypi.org/project/pykostal/${{ needs.validate-version.outputs.version }}/).
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Success notification
      run: |
        echo "🎉 Successfully released version ${{ needs.validate-version.outputs.version }} to PyPI!"
        echo "📦 Package: https://pypi.org/project/pykostal/${{ needs.validate-version.outputs.version }}/"
        echo "🏷️  Tag: v${{ needs.validate-version.outputs.version }}"
